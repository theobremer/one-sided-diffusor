/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.04;

deltaT          0.00005; // 0.0001

writeControl    adjustable;

writeInterval   0.005;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           1; 



// variables 
pi 3.1415926535;
angleDeg 20;                                          // angle of the ramp
angle #eval{$angleDeg/180*$pi}; 


functions
{
    solverInfo
    {
        type        solverInfo;
        functionObjectLibs ("libutilityFunctionObjects.so");

        fields
        (
            U
            p
            k
        );
        writeResidualFields yes;

        writeControl   timeStep;
        writeInterval  0.005;
    }

    yPlus
    {
        type            yPlus;
        libs            (fieldFunctionObjects);
        patches         (lowerWall);
        writeFields     true;
        log             true;
        executeControl  writeTime;
        writeControl    writeTime;
    }

   vorticity
   {
        type            vorticity;
        libs            ("libfieldFunctionObjects.so");
        executeControl  writeTime;
        writeControl    writeTime;
   }

   
   wallShearStress
   {
    // Mandatory entries
        type            wallShearStress;
        libs            ("libfieldFunctionObjects.so");

    // Optional entries
        patches         (lowerWall);
        writeFields     true;
        log             true;
        executeControl  writeTime;
        writeControl    writeTime;

    // Optional (inherited) entries
        writePrecision  10;
        writeToFile     true;
        useUserTime     true;

        //region          lowerWall;
        //enabled         true;
        //log             true;
        //timeStart       0;
        //timeEnd         1000;
        //executeControl  timeStep;
        //executeInterval 1;
        //writeControl    writeTime;
        //writeInterval   -1;
    }

    Samples
    {
        type            sample;
        libs            ("libsamplingFunctionObjects.so");
        log             true;
        executeControl  writeTime;
        writeControl    writeTime;

        interpolationScheme cellPoint;

        setFormat       raw; // oder csv, vtk, ensight etc.
        
        sets
        (
            pointSet
            {
                type    cloud;
                axis    xyz;
                points
                (
                    (0.082 #eval{-tan($angle)*0.082} 0.0)
                    (0.122 #eval{-tan($angle)*0.122} 0.0)
                    (0.162 #eval{-tan($angle)*0.162} 0.0)
                    (0.202 #eval{-tan($angle)*0.202} 0.0)
                    (0.242 #eval{-tan($angle)*0.242} 0.0)
                    (0.282 #eval{-tan($angle)*0.282} 0.0)
                    (0.386 #eval{-sin($angle)*0.337} 0.0)
                );
            }

            //lineSet
            //{
            //    type    uniform;
            //    axis    x;
            //    start   (0 0 0);
            //    end     (0.1 0 0);
            //    nPoints 20;
            //}
        );  
        
        surfaces
        (
            wallShearSurface
            {
                type           patch;
                patches        (lowerWall);
                interpolate    true;
            }
        );

        fields
        (
            p
            U
            wallShearStress
        );
        
    }

}

// ************************************************************************* //
