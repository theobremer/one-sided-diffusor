#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | www.openfoam.com
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
#     Copyright (C) 2011-2016 OpenFOAM Foundation
#     Copyright (C) 2017-2021 OpenCFD Ltd.
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM, distributed under GPL-3.0-or-later.
#
# Script
#     Allrun
#
# Description
#     Run tutorial cases and summarize the outcome as 'testLoopReport'
#
#------------------------------------------------------------------------------

cd "${0%/*}" || exit
. "${WM_PROJECT_DIR:?}"/bin/tools/RunFunctions
#------------------------------------------------------------------------------
case=$(basename "$PWD")

cd steadyState

# choose which mesh to use for steadyState case by uncommenting/commenting the right mesh
#------------------------------------------------------------------------------
# mesh with upper plane following the form of the Ramp
#cp system/blockMeshDict.m0 system/blockMeshDict

# mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m1 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m2 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m3 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
cp system/blockMeshDict.m3.1 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m4 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m5 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m6 system/blockMeshDict
#------------------------------------------------------------------------------

# copying the boundary conditions
cp -r 0.org 0

# dummy file for post-processing with paraview
touch "$case""_steadyState".foam


# mesh creation
runApplication blockMesh
mv log.blockMesh log.postProcess.blockMeshSteadyState
runApplication checkMesh -allGeometry -allTopology
mv log.checkMesh log.postProcess.checkMeshSteadyState

# parallel run simpleFoam
runApplication decomposePar
mv log.decomposePar log.postProcess.decomposeParSteadyState
runParallel renumberMesh -overwrite
mv log.renumberMesh log.postProcess.renumberMeshSteadyState
runParallel potentialFoam -writephi
runParallel $(getApplication)
runParallel postProcess -func "writeCellCentres" -constant -time none
mv log.postProcess log.postProcess.writeCellCentres
runParallel postProcess -func "writeCellVolumes" -constant -time none
mv log.postProcess log.postProcess.writeCellVolumes
runApplication reconstructPar
mv log.reconstructPar log.postProcess.reconstructParSteadyState


# fetching the last iteration of the steadyState case
LAST_TIME=$(foamListTimes -case . -latestTime)
echo "last iteration for simpleFoam: $LAST_TIME"
# cleaning up
#find ./ -type f \( -name "phi" -o -name "phi_0" -o -name "U_0" -o -name "gradU" \) -exec rm {} \;

# changing to the transient case
cd ../transient

#------------------------------------------------------------------------------
# choose which mesh to use for the transient case by uncommenting/commenting the right mesh

# mesh with upper plane following the form of the Ramp
#cp system/blockMeshDict.m0 system/blockMeshDict

# mesh with upper plane following the form of the top wall 
cp system/blockMeshDict.m1 system/blockMeshDict

# refined mesh with upper plane following the form of the top wall 
#cp system/blockMeshDict.m2 system/blockMeshDict
#------------------------------------------------------------------------------

# dummy file for post-processing with paraview
touch "$case""_transient".foam

# mesh creation for mesh with jet as patch
runApplication blockMesh
mv log.blockMesh log.postProcess.blockMeshTransient
runApplication checkMesh -allGeometry -allTopology
mv log.checkMesh log.postProcess.checkMeshTransient


# copying steadyState solution as an start
cp -r ../steadyState/$LAST_TIME/* 0
echo "using $LAST_TIME as a startvalues"
rm 0/uniform/time

mapFields ../steadyState

sed -i '/Jet/,/}/c\    Jet\n    {\n        type            fixedValue;\n        value           uniform (19.696 3.473 0);\n    }' 0/U

sed -i '/Jet/,/}/{s/type.*/type            fixedValue;/;s/value.*/value           uniform 0.54;/}' 0/k

sed -i '/Jet/,/}/{s/type.*/type            fixedValue;/;s/value.*/value           uniform 47.916;/}' 0/omega

sed -i '/Jet/,/}/{s/type.*/type            calculated;/;s/value.*/value           uniform 0;/}' 0/nut

# setting the startTime to the last Timestep of the simpleFoam solution
#sed -i "s/^startTime\s*0;/startTime $LATEST_TIME;/g" system/controlDict


echo "BC changed to transient"

# parallel run pimpleFoam
runApplication decomposePar
mv log.decomposePar log.postProcess.decomposeParTransient
runParallel renumberMesh -overwrite
mv log.renumberMesh log.postProcess.renumberMeshTransient
runParallel $(getApplication)
#runParallel postProcess -func "writeCellCentres" -constant -time none
#mv log.postProcess log.postProcess.writeCellCentres
#runParallel postProcess -func "writeCellVolumes" -constant -time none
#mv log.postProcess log.postProcess.writeCellVolumes
runApplication reconstructPar
mv log.reconstructPar log.postProcess.reconstructParTransient



#------------------------------------------------------------------------------
